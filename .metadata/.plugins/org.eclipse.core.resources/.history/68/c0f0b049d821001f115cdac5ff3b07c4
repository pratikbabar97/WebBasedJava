package com.app.dao;

import static com.app.utils.DBUtils.openConnection;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.app.entities.User;

public class UserDaoImpl implements UserDao {
	// states
	// and estalish connection with database using constructor
	private Connection cn;
	private PreparedStatement pst1, pst2, pst3, pst4, pst5, pst6;

	public UserDaoImpl() throws SQLException {
		// establish connection with database using opencoo method from dbutils and
		// returning the object connection in cn
		cn = openConnection();
		// pst1 for sign in
		pst1 = cn.prepareStatement("select * from users where email=? and password=?");

		// pst2: for getting user/voter details

		pst2 = cn.prepareStatement("select * form users where role='voter' and dob between ? and ?");

		// register voter in users table
		// id | first_name | last_name | email | password | dob | status | role
		pst3 = cn.prepareStatement("insert into users values(default,?,?,?,?,?,?,?)");

		// change password of voter/user
		pst4 = cn.prepareStatement("updat users set password=? where email=? and password=? and role='voter'");
		// update the voting status

		pst6 = cn.prepareStatement("update users set status=1 where id=?");

		System.out.println("user dao created...");
	}

	@Override
	public User signIn(String email, String password) throws SQLException {
		// set IN params
		pst1.setString(1, email);
		pst1.setString(2, password);
		// execute query
		try (ResultSet resultSet = pst1.executeQuery()) {
			if (resultSet.next()) // result set act as cursor which is before 1st rom need to move one location
									// ahead
			{

				// return parameterised constructor for user
				return new User(resultSet.getInt(1), resultSet.getString(2), resultSet.getString(3), email, password,
						resultSet.getDate(6), resultSet.getBoolean(7), resultSet.getString(8));
			}
		}

		return null;
	}

	@Override
	public List<User> getUserDetails(Date begin, Date end) throws SQLException {
		// take empty array list
		List<User> users = new ArrayList<>();

		// set In Parameters
		pst2.setDate(1, begin);
		pst2.setDate(2, end);

		// execute Query
		try (ResultSet rst = pst2.executeQuery()) {
			while (rst.next()) {
				User e = new User(rst.getInt(1), rst.getString(2), rst.getString(3), rst.getString(4), rst.getString(5),
						rst.getDate(6), rst.getBoolean(7), rst.getString(8));
				users.add(e);
			}

		}
		return users;///return populated list of users 
	}

	@Override
	public String voterRegistrtion(User newVoter) throws SQLException {

		return null;
	}

	@Override
	public String changePassword(String email, String oldPWD, String newPwd) throws SQLException {

		return null;
	}

	@Override
	public String deleteVoterDetails(int voterId) throws SQLException {

		return null;
	}

	@Override
	public String updateVotingStatus(int voterId) throws SQLException {

		return null;
	}

}
